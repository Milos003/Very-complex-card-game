// --------------------------- Game.hpp ---------------------------
//
// Declares the Game class which manages the entire card game flow,
// including setup, rounds, players, board state, and game outcome.
//
// Group: 051
//
// Author: Miloš Đukarić, Florian Kerman, Stefan Jović
// ----------------------------------------------------------------
#pragma once

#include <string>
#include "ConfigParser.hpp"
#include "MessageConfigParser.hpp"
#include "CardFactory.hpp"
#include "Deck.hpp"
#include "Player.hpp"
#include "Board.hpp"

//---------------------------------------------------------------------------------------------------------------------
///
/// Enum class representing the game phase. Used to distinguish between Setup and Battle phases.
///
/// @values
///     Setup  - Initial configuration phase before the battle.
///     Battle - Main gameplay phase where cards are used.
///
//---------------------------------------------------------------------------------------------------------------------
enum class Phase
{
  Setup,
  Battle
};

//---------------------------------------------------------------------------------------------------------------------
///
/// Enum class representing the result of the game.
///
/// @values
///     None     - Game is still in progress or result not yet determined.
///     P1_Wins  - Player 1 has won the game.
///     P2_Wins  - Player 2 has won the game.
///     Tie      - The game ended in a draw.
///
//---------------------------------------------------------------------------------------------------------------------
enum class GameResult
{
  None,
  P1_Wins,
  P2_Wins,
  Tie
};

//---------------------------------------------------------------------------------------------------------------------
///
/// Core game class. Manages the initialization, player state, game configuration,
/// message loading, round flow, and win condition logic.
///
/// This class serves as the central controller for the entire game logic,
/// including the setup and execution of both players and board.
///
///---------------------------------------------------------------------------------------------------------------------
class Game
{
public:
  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Constructor: initializes game with config and message files.
  ///
  /// @param gameConfigPath Path to the GAME config file
  /// @param messageConfigPath Path to the MESSAGE config file
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Game(const std::string &gameConfigPath, const std::string &messageConfigPath);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Runs the main game loop.
  ///
  /// @return 0 on normal game quit
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int run();

  int doneCounter = 0;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to Player 1.
  ///
  /// @return Reference to player 1
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player &getPlayer1() { return p1; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to Player 2.
  ///
  /// @return Reference to player 2
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player &getPlayer2() { return p2; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to the current player.
  ///
  /// @return Reference to the current player (either player 1 or 2)
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player &getCurrentPlayer() { return (currentPlayerId == 1) ? p1 : p2; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to the opponent player.
  ///
  /// @return Reference to the opponent of the current player
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player &getOpponentPlayer() { return (currentPlayerId == 1) ? p2 : p1; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Switches current player from 1 to 2 or vice versa.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void switchPlayer() { currentPlayerId = (currentPlayerId == 1) ? 2 : 1; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to game config.
  ///
  /// @return Reference to GameConfigParser
  ///
  //---------------------------------------------------------------------------------------------------------------------
  GameConfigParser &getConfig() { return cfg; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns const reference to message config.
  ///
  /// @return Const reference to MessageConfigParser
  ///
  //---------------------------------------------------------------------------------------------------------------------
  const MessageConfigParser &getMessages() const { return msgs; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns current round number.
  ///
  /// @return Current round number as int
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int getCurrentRound() const { return roundNumber; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to card factory.
  ///
  /// @return Reference to CardFactory
  ///
  //---------------------------------------------------------------------------------------------------------------------
  CardFactory &getCardFactory() { return factory; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to the game board.
  ///
  /// @return Reference to Board
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Board &getBoard() { return board; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Checks whether board printing is enabled.
  ///
  /// @return true if board printing is on, false otherwise
  ///
  //---------------------------------------------------------------------------------------------------------------------
  bool isBoardPrinting() const { return boardPrinting; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Enables or disables board printing.
  ///
  /// @param on True to enable, false to disable
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setBoardPrinting(bool on) { boardPrinting = on; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to the attacker player.
  ///
  /// @return Reference to attacker
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player &getAttacker() { return *attacker; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to the defender player.
  ///
  /// @return Reference to defender
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player &getDefender() { return *defender; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Const version: get attacker.
  ///
  /// @return Const reference to attacker
  ///
  //---------------------------------------------------------------------------------------------------------------------
  const Player &getAttacker() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Const version: get defender.
  ///
  /// @return Const reference to defender
  ///
  //---------------------------------------------------------------------------------------------------------------------
  const Player &getDefender() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Const version: get current player.
  ///
  /// @return Const reference to current player
  ///
  //---------------------------------------------------------------------------------------------------------------------
  const Player &getCurrentPlayer() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets attacker player.
  ///
  /// @param p Reference to player to be set as attacker
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setAttacker(Player &p) { attacker = &p; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets defender player.
  ///
  /// @param p Reference to player to be set as defender
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setDefender(Player &p) { defender = &p; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns current round number.
  ///
  /// @return Current round number
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int getRoundNumber() const { return roundNumber; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Increments the round number by 1.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void incrementRound();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Updates attacker/defender roles for a new round.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void updateRolesForNewRound();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets the current player by ID.
  ///
  /// @param id Player ID (1 or 2)
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setCurrentPlayer(int id);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Checks if current player is the defender.
  ///
  /// @return true if current player is defender, false otherwise
  ///
  //---------------------------------------------------------------------------------------------------------------------
  bool currentPlayerIsDefender() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Prints the board with Player 1 on the bottom.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void printBoardWithP1OnBottom();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Prints the board with Player 2 on the bottom.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void printBoardWithP2OnBottom();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Initializes a round with its header info.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void initRoundWithHeader();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Prints the current state of the board.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void printBoard();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Processes the battle phase.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void processBattlePhase();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets the current game phase.
  ///
  /// @param p Phase to set (Setup or Battle)
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setPhase(Phase p) { currentPhase = p; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Initializes round values (roles, etc).
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void initRound();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Prints the round header.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void printRoundHeader();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Ends the game (sets gameOver to true).
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void endGame() { gameOver = true; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Checks if the game is over.
  ///
  /// @return true if game is over, false otherwise
  ///
  //---------------------------------------------------------------------------------------------------------------------
  bool isGameOver() const { return gameOver; }

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Handles direct hit to current opponent (if no defenders).
  ///
  /// @param damage Amount of damage to apply
  ///
  /// @return true if hit applied successfully
  ///
  //---------------------------------------------------------------------------------------------------------------------
  bool handleDirectHit(int damage);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Handles direct hit to attacker (when defender has no cards).
  ///
  /// @param damage Amount of damage to apply
  ///
  /// @return true if hit applied successfully
  ///
  //---------------------------------------------------------------------------------------------------------------------
  bool handleDirectHitToAttacker(int damage);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Checks and processes all possible direct hits on both sides.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void checkAndHandleAllDirectHits();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns reference to player by ID.
  ///
  /// @param id Player ID (1 or 2)
  ///
  /// @return Reference to corresponding player
  ///
  //---------------------------------------------------------------------------------------------------------------------e
  Player &getPlayerById(int id);

private:
  GameConfigParser cfg;
  MessageConfigParser msgs;
  CardFactory factory;
  Deck deck1, deck2;
  Player p1, p2;
  Board board;
  int roundNumber;
  Phase currentPhase;
  bool boardPrinting;
  int currentPlayerId = 1;

  // Attacker/Defender pointers for DONE logic
  Player *attacker;
  Player *defender;

  GameResult result = GameResult::None;
  std::string gameConfigPath;

  void printWelcome();

  void promptPlayer();

  bool gameOver = false;

  void writeResultToConfig();
};
