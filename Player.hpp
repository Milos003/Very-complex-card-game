// --------------------------- Player.hpp ---------------------------
//
// Declaration of the Player class: represents a player in the card game.
// Each player holds health, mana, deck, hand, and graveyard state.
//
// Group: 051
//
// Author: Miloš Đukarić, Florian Kerman, Stefan Jović
// ------------------------------------------------------------------------
#pragma once

#include <vector>
#include <memory>
#include <string>

class Card;
class CreatureCard;
class Deck;

//---------------------------------------------------------------------------------------------------------------------
///
/// A game player: manages health, mana, draw pile (deck), hand, and graveyard.
///
//---------------------------------------------------------------------------------------------------------------------
class Player
{
public:
  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Constructs a Player object with specified ID, health, and mana.
  ///
  /// @param playerId       Either 1 or 2
  /// @param startHealth    Initial health points
  /// @param manaPoolStart  Initial (and max) mana pool size
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Player(int playerId, int startHealth, int manaPoolStart);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Draws a single card from the deck to the hand.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void drawCard();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Draws multiple cards in a row.
  ///
  /// @param n Number of cards to draw
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void drawMultiple(int n);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns all cards from hand to the bottom of the deck and clears the hand.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void returnHandToBottomOfDeck();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Removes a specific card from the hand.
  ///
  /// @param card Pointer to card to remove
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void removeCardFromHand(Card *card);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Searches for a card in hand by its ID (case-insensitive).
  ///
  /// @param id The card ID to search for
  /// @return Pointer to the card if found, otherwise nullptr
  ///
  //---------------------------------------------------------------------------------------------------------------------
  Card *findCardInHandById(const std::string &id);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Assigns a deck to the player by copying card pointers.
  ///
  /// @param d Reference to the deck to assign
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setDeck(Deck &d);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Subtracts mana from the current mana pool.
  ///
  /// @param amount Amount of mana to subtract
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void subtractMana(int amount);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Checks whether the player can still use the redraw option.
  ///
  /// @return true if redraw is possible
  ///
  //---------------------------------------------------------------------------------------------------------------------
  bool canRedraw() const;

  ///
  /// Permanently disables the player's ability to redraw.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void disableRedraw();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Performs a redraw: returns hand to deck and draws one card less.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void performRedraw();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Adds a defeated creature to the graveyard.
  ///
  /// @param creature Shared pointer to the defeated creature card
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void addToGraveyard(std::shared_ptr<CreatureCard> creature);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Adds a card to the player's hand.
  ///
  /// @param card Shared pointer to the card
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void addCardToHand(std::shared_ptr<Card> card);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns a modifiable reference to the graveyard.
  ///
  /// @return Reference to vector of creature cards in graveyard
  ///
  //---------------------------------------------------------------------------------------------------------------------
  std::vector<std::shared_ptr<CreatureCard> > &getMutableGraveyard();

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Prints the player's current hand in formatted ASCII form.
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void printHand() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns the player ID.
  ///
  /// @return Player ID (1 or 2)
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int getId() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns the player's current health.
  ///
  /// @return Current health points
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int getHealth() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns the current amount of mana.
  ///
  /// @return Mana value
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int getMana() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns the size of the mana pool.
  ///
  /// @return Mana pool size
  ///
  //---------------------------------------------------------------------------------------------------------------------
  int getManaPoolSize() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns the number of cards remaining in the deck.
  ///
  /// @return Deck size
  ///
  //---------------------------------------------------------------------------------------------------------------------
  size_t getDeckRemaining() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns a const reference to the hand.
  ///
  /// @return Vector of shared pointers to cards in hand
  ///
  //---------------------------------------------------------------------------------------------------------------------
  const std::vector<std::shared_ptr<Card> > &getHand() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Returns a const reference to the graveyard.
  ///
  /// @return Vector of shared pointers to creature cards in graveyard
  ///
  //---------------------------------------------------------------------------------------------------------------------
  const std::vector<std::shared_ptr<CreatureCard> > &getGraveyard() const;

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets the player's health, clamped to minimum 0.
  ///
  /// @param newHealth The new health value
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setHealth(int newHealth);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets the current mana, clamped to the mana pool size.
  ///
  /// @param newMana The new mana value
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setMana(int newMana);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Sets the maximum size of the mana pool.
  ///
  /// @param newSize The new mana pool size
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void setManaPoolSize(int newSize);

  //---------------------------------------------------------------------------------------------------------------------
  ///
  /// Removes a creature card from the graveyard by ID match.
  ///
  /// @param card Card to remove
  ///
  //---------------------------------------------------------------------------------------------------------------------
  void removeFromGraveyard(std::shared_ptr<CreatureCard> card);

  std::shared_ptr<Card> extractCardFromHand(Card *rawPtr);

private:
  int id;
  int health;
  int mana;
  int manaPoolSize;
  bool redrawEnabled;

  std::vector<std::shared_ptr<Card> > deck;
  std::vector<std::shared_ptr<Card> > hand; // Cards in hand
  std::vector<std::shared_ptr<CreatureCard> > graveyard; // Destroyed creatures
};
